server:
  port: 4561

management:
  endpoint:
    health:
      show-details: "always"
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus

#If you use a database then uncomment below lines and update db properties accordingly
spring:
  config:
    import: "optional:configtree:/mnt/secrets/"
  application:
    name: HMC-CFT-Hearing-Service
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
  main:
    allow-bean-definition-overriding: true
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${IDAM_OIDC_URL:http://localhost:5000}/o

#  datasource:
#    driver-class-name: org.postgresql.Driver
#    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}${DB_OPTIONS:}
#    username: ${DB_USER_NAME}
#    password: ${DB_PASSWORD}
#    properties:
#      charSet: UTF-8
#    hikari:
#      minimumIdle: 2
#      maximumPoolSize: 10
#      idleTimeout: 10000
#      poolName: {to-be-defined}HikariCP
#      maxLifetime: 7200000
#      connectionTimeout: 30000
#  jpa:
#    properties:
#      hibernate:
#        jdbc:
#          lob:
#            # silence the 'wall-of-text' - unnecessary exception throw about blob types
#            non_contextual_creation: true

azure:
  application-insights:
    instrumentation-key: ${hmc.AppInsightsInstrumentationKey:00000000-0000-0000-0000-000000000000}

role:
  assignment:
    api:
      host: ${ROLE_ASSIGNMENT_URL:http://localhost:4096}

idam:
  api:
    url: ${IDAM_API_URL:http://localhost:5000}
  s2s-auth:
    microservice: aac_manage_case_assignment
    totp_secret: ${MANAGE_CASE_S2S_KEY:AAAAAAAAAAAAAAAA}
    url: ${S2S_URL:http://localhost:4502}

oidc:
  issuer: ${OIDC_ISSUER:http://fr-am:8080/openam/oauth2/hmcts}

http:
  client:
    max:
      total: ${HTTP_CLIENT_MAX_TOTAL:100}
      client_per_route: ${HTTP_CLIENT_MAX_CLIENT_PER_ROUTE:20}
    seconds:
      idle:
        connection: ${HTTP_CLIENT_SECONDS_IDLE_CONNECTION:120}
    validate:
      after:
        inactivity: ${HTTP_CLIENT_VALIDATE_AFTER_INACTIVITY:2000}
    connection:
      timeout: ${HTTP_CLIENT_CONNECTION_TIMEOUT:30000}
    read:
      timeout: ${HTTP_CLIENT_READ_TIMEOUT:60000}
